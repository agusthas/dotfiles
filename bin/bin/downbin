#!/usr/bin/env bash

# Wrapper around installation of packages
# DOESNT mean that it's a package manager, just a wrapper around the command for OS specific installation

# ENV: APP_BIN_DIR: directory to install the app to

# 1. Try github (linux only)
# 2. Try default package manager (apt, dnf, yum, pacman, brew, ...)

display_usage() {
cat << EOF
USAGE:
EOF
}

case $(uname -s) in
  Linux)
    # Linux
    OS="linux"
    ;;
  Darwin)
    # Mac OSX
    OS="mac"
    echo "Not implemented yet"
    exit 1
    ;;
  *)
    echo "Unsupported OS"
    exit 1
    ;;
esac

# Trying github first
with_github() {
  repo="$1"
  url="https://api.github.com/repos/$repo/releases/latest"

  # check status
  (http --check-status --ignore-stdin --timeout=5 HEAD "$url" &>/dev/null)
  local ret=$?
  if [ "$ret" -ne 0 ] ; then
    echo -e "Could not reach github\n" >&2
    return 1
  fi

  echo "Installing from github"
  echo "Repository: $repo"
  echo "URL: $url"
  printf "\n"

  # get latest release
  tmp="/tmp/.github-install"
  rm -rf $tmp
  mkdir -p $tmp

  tmp_file="$(mktemp)"
  http --timeout=5  -b "$url" > "$tmp_file"

  release_name=$(jq -r '.assets[].name' "$tmp_file" | \
    fzf --query "$(uname -s | tr '[:upper:]' '[:lower:]')" --height=50% --reverse --no-info --prompt="Select a release: ")

  if [[ -z "$release_name" ]]; then
    rm -rf "$tmp_file"
    echo "No release selected"
    exit
  fi

  browser_download_url=$(jq -r --arg release_name "$release_name" '.assets[] | select(.name == $release_name) | .browser_download_url' "$tmp_file")

  echo "Download URL: $browser_download_url"

  pushd $tmp || exit

  http -b --timeout=5 --download "$browser_download_url"

  if [ -f "$release_name" ]; then
      case $release_name in
      *.tar.bz2)  tar xjf "$release_name"      ;;
      *.tar.gz)   tar xzf "$release_name"      ;;
      *.tar.xz)   tar xzf "$release_name"      ;;
      *.bz2)      bunzip2 "$release_name"      ;;
      *.gz)       gunzip "$release_name"       ;;
      *.tar)      tar xf "$release_name"       ;;
      *.tbz2)     tar xjf "$release_name"      ;;
      *.tgz)      tar xzf "$release_name"      ;;
      *.zip)      unzip "$release_name"        ;;
      *.Z)        uncompress "$release_name"   ;;
      *.rar)      rar x "$release_name"        ;;  # 'rar' must to be installed
      *.jar)      jar -xvf "$release_name"     ;;  # 'jdk' must to be installed
      *)          echo "'$release_name' cannot be extracted via extract()" ;;
    esac
  fi

  bin=$(find . -type f \
    | fzf --exit-0 --height=50% --reverse --no-info --prompt="Select the executable: ") || (echo "No executable selected" && exit)

  if [[ -n "$bin" ]]; then
    basename=$(basename "$bin")
    # shellcheck disable=SC2162
    read -p "Choose an alias (empty to leave: $basename): " alias
    target="${APP_BIN_DIR:-$HOME/bin}/${alias:-$basename}"
    mv "$bin" "$target" && chmod +x "$target"
    echo "Success! Saved in: $target"
  fi
  popd || exit
}

with_package_manager() {
  local package_name="$1"

  echo "Installing from package manager"
  
  case "$OS" in
    'linux')
      case $(lsb_release -is) in
        Ubuntu)
          echo "Using package manager: apt"
          sudo apt update && sudo apt upgrade -y
          sudo apt install "$package_name"
          return 0
          ;;
        *)
          echo "Unsupported OS"
          exit 1
          ;;
      esac
      ;;
    'mac')
      echo "Using package manager: brew"
      echo "Not implemented yet"
      exit 1
      ;;
    *)
      echo "Unsupported OS"
      exit 1
      ;;
  esac
}

if [[ $# -eq 0 ]] ; then
  display_usage
  exit 0
fi

case "$OS" in
  'linux')
    with_github "$1" || with_package_manager "$1"
    ;;
  'mac')
    with_package_manager "$1"
    ;;
  *)
    echo "Unsupported OS"
    exit 1
    ;;
esac