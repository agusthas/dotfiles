#!/usr/bin/env bash

usage() {
  echo "Usage:"
  echo "  [APP_BIN_DIR] $0 [-c <command-name>] <repo-short-url>"
  echo "Environment variables:"
  echo "  APP_BIN_DIR: directory to install the app to"
  echo "Example:"
  echo "  $0 sharkdp/fd"
  echo "  $0 -c fd sharkdp/fd"
  echo "  APP_BIN_DIR=\$HOME/bin $0 sharkdp/fd"
}

cmd=""
app_bin_dir=${APP_BIN_DIR:-$HOME/bin}
tmp_file="$(mktemp)"

while getopts ":c:h:s:" o; do
  case "$o" in
    c) cmd="${OPTARG}";;
    h) usage >&2; exit 1;;
  esac
done
shift $((OPTIND-1))

if [[ $# -eq 0 ]]; then
  usage >&2
  exit 1
fi

repo="$1"
if [[ ! -n "$cmd" ]]; then
  cmd="$(basename $repo)"
fi


tmp="/tmp/.github-install"
url="https://api.github.com/repos/$repo/releases/latest"
rm -rf $tmp
mkdir -p $tmp

echo "Repository: $repo"
echo "Command: $cmd"
echo "URL: $url"

http -b "$url" > $tmp_file

release_name=$(cat "$tmp_file" | jq -r '.assets[].name' | fzf --query "$(uname -s | tr '[:upper:]' '[:lower:]')" --height=50% --reverse --no-info --prompt="Select a release: ") || exit 1

browser_download_url=$(cat "$tmp_file" | jq -r --arg release_name "$release_name" '.assets[] | select(.name == $release_name) | .browser_download_url')

rm -rf $tmp_file

echo "Download URL: $browser_download_url"

pushd $tmp >/dev/null
printf "\n"

http -b --timeout 5 --download "$browser_download_url"

if [ -f "$release_name" ]; then
  case $release_name in
    *.tar.bz2)  tar xjf $release_name      ;;
    *.tar.gz)   tar xzf $release_name      ;;
    *.tar.xz)   tar xzf $release_name      ;;
    *.bz2)      bunzip2 $release_name      ;;
    *.gz)       gunzip $release_name       ;;
    *.tar)      tar xf $release_name       ;;
    *.tbz2)     tar xjf $release_name      ;;
    *.tgz)      tar xzf $release_name      ;;
    *.zip)      unzip $release_name        ;;
    *.Z)        uncompress $release_name   ;;
    *.rar)      rar x $release_name        ;;  # 'rar' must to be installed
    *.jar)      jar -xvf $release_name     ;;  # 'jdk' must to be installed
    *)          echo "'$release_name' cannot be extracted via extract()" ;;
  esac
fi

bin=$(find . -type f | fzf --query "/$cmd\$" --height 50% --reverse \
  --prompt="Select the executable: " \
  --no-info) || exit 1
popd

if [[ -n "$bin" ]]; then
  basename=$(basename $bin)
  read -p "Choose an alias (empty to leave: $basename): " alias
  target="$app_bin_dir/${alias:-$basename}"
  mv "$tmp/$bin" "$target"
  chmod +x "$target"
  echo "Success! Saved in: $target"
else
  echo "No executable found" 2>&1
fi